/*
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * API version: 2.0
 * Contact: support@bitbucket.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket_client

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type PropertiesApi interface {

	/*
	 * DeleteCommitHostedPropertyValue Method for DeleteCommitHostedPropertyValue
	 * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param workspace The repository container; either the workspace slug or the UUID in curly braces.
	 * @param repoSlug The repository.
	 * @param commit The commit.
	 * @param appKey The key of the Connect app.
	 * @param propertyName The name of the property.
	 * @return PropertiesApiApiDeleteCommitHostedPropertyValueRequest
	 */
	DeleteCommitHostedPropertyValue(ctx _context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string) PropertiesApiApiDeleteCommitHostedPropertyValueRequest

	/*
	 * DeleteCommitHostedPropertyValueExecute executes the request
	 */
	DeleteCommitHostedPropertyValueExecute(r PropertiesApiApiDeleteCommitHostedPropertyValueRequest) (*_nethttp.Response, error)

	/*
	 * DeletePullRequestHostedPropertyValue Method for DeletePullRequestHostedPropertyValue
	 * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param workspace The repository container; either the workspace slug or the UUID in curly braces.
	 * @param repoSlug The repository.
	 * @param pullrequestId The pull request ID.
	 * @param appKey The key of the Connect app.
	 * @param propertyName The name of the property.
	 * @return PropertiesApiApiDeletePullRequestHostedPropertyValueRequest
	 */
	DeletePullRequestHostedPropertyValue(ctx _context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string) PropertiesApiApiDeletePullRequestHostedPropertyValueRequest

	/*
	 * DeletePullRequestHostedPropertyValueExecute executes the request
	 */
	DeletePullRequestHostedPropertyValueExecute(r PropertiesApiApiDeletePullRequestHostedPropertyValueRequest) (*_nethttp.Response, error)

	/*
	 * DeleteRepositoryHostedPropertyValue Method for DeleteRepositoryHostedPropertyValue
	 * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param workspace The repository container; either the workspace slug or the UUID in curly braces.
	 * @param repoSlug The repository.
	 * @param appKey The key of the Connect app.
	 * @param propertyName The name of the property.
	 * @return PropertiesApiApiDeleteRepositoryHostedPropertyValueRequest
	 */
	DeleteRepositoryHostedPropertyValue(ctx _context.Context, workspace string, repoSlug string, appKey string, propertyName string) PropertiesApiApiDeleteRepositoryHostedPropertyValueRequest

	/*
	 * DeleteRepositoryHostedPropertyValueExecute executes the request
	 */
	DeleteRepositoryHostedPropertyValueExecute(r PropertiesApiApiDeleteRepositoryHostedPropertyValueRequest) (*_nethttp.Response, error)

	/*
	 * DeleteUserHostedPropertyValue Method for DeleteUserHostedPropertyValue
	 * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example `{account UUID}`, OR an Atlassian Account ID.
	 * @param appKey The key of the Connect app.
	 * @param propertyName The name of the property.
	 * @return PropertiesApiApiDeleteUserHostedPropertyValueRequest
	 */
	DeleteUserHostedPropertyValue(ctx _context.Context, selectedUser string, appKey string, propertyName string) PropertiesApiApiDeleteUserHostedPropertyValueRequest

	/*
	 * DeleteUserHostedPropertyValueExecute executes the request
	 */
	DeleteUserHostedPropertyValueExecute(r PropertiesApiApiDeleteUserHostedPropertyValueRequest) (*_nethttp.Response, error)

	/*
	 * GetCommitHostedPropertyValue Method for GetCommitHostedPropertyValue
	 * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param workspace The repository container; either the workspace slug or the UUID in curly braces.
	 * @param repoSlug The repository.
	 * @param commit The commit.
	 * @param appKey The key of the Connect app.
	 * @param propertyName The name of the property.
	 * @return PropertiesApiApiGetCommitHostedPropertyValueRequest
	 */
	GetCommitHostedPropertyValue(ctx _context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string) PropertiesApiApiGetCommitHostedPropertyValueRequest

	/*
	 * GetCommitHostedPropertyValueExecute executes the request
	 */
	GetCommitHostedPropertyValueExecute(r PropertiesApiApiGetCommitHostedPropertyValueRequest) (*_nethttp.Response, error)

	/*
	 * GetPullRequestHostedPropertyValue Method for GetPullRequestHostedPropertyValue
	 * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param workspace The repository container; either the workspace slug or the UUID in curly braces.
	 * @param repoSlug The repository.
	 * @param pullrequestId The pull request ID.
	 * @param appKey The key of the Connect app.
	 * @param propertyName The name of the property.
	 * @return PropertiesApiApiGetPullRequestHostedPropertyValueRequest
	 */
	GetPullRequestHostedPropertyValue(ctx _context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string) PropertiesApiApiGetPullRequestHostedPropertyValueRequest

	/*
	 * GetPullRequestHostedPropertyValueExecute executes the request
	 */
	GetPullRequestHostedPropertyValueExecute(r PropertiesApiApiGetPullRequestHostedPropertyValueRequest) (*_nethttp.Response, error)

	/*
	 * GetRepositoryHostedPropertyValue Method for GetRepositoryHostedPropertyValue
	 * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param workspace The repository container; either the workspace slug or the UUID in curly braces.
	 * @param repoSlug The repository.
	 * @param appKey The key of the Connect app.
	 * @param propertyName The name of the property.
	 * @return PropertiesApiApiGetRepositoryHostedPropertyValueRequest
	 */
	GetRepositoryHostedPropertyValue(ctx _context.Context, workspace string, repoSlug string, appKey string, propertyName string) PropertiesApiApiGetRepositoryHostedPropertyValueRequest

	/*
	 * GetRepositoryHostedPropertyValueExecute executes the request
	 */
	GetRepositoryHostedPropertyValueExecute(r PropertiesApiApiGetRepositoryHostedPropertyValueRequest) (*_nethttp.Response, error)

	/*
	 * RetrieveUserHostedPropertyValue Method for RetrieveUserHostedPropertyValue
	 * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example `{account UUID}`, OR an Atlassian Account ID.
	 * @param appKey The key of the Connect app.
	 * @param propertyName The name of the property.
	 * @return PropertiesApiApiRetrieveUserHostedPropertyValueRequest
	 */
	RetrieveUserHostedPropertyValue(ctx _context.Context, selectedUser string, appKey string, propertyName string) PropertiesApiApiRetrieveUserHostedPropertyValueRequest

	/*
	 * RetrieveUserHostedPropertyValueExecute executes the request
	 */
	RetrieveUserHostedPropertyValueExecute(r PropertiesApiApiRetrieveUserHostedPropertyValueRequest) (*_nethttp.Response, error)

	/*
	 * UpdateCommitHostedPropertyValue Method for UpdateCommitHostedPropertyValue
	 * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param workspace The repository container; either the workspace slug or the UUID in curly braces.
	 * @param repoSlug The repository.
	 * @param commit The commit.
	 * @param appKey The key of the Connect app.
	 * @param propertyName The name of the property.
	 * @return PropertiesApiApiUpdateCommitHostedPropertyValueRequest
	 */
	UpdateCommitHostedPropertyValue(ctx _context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string) PropertiesApiApiUpdateCommitHostedPropertyValueRequest

	/*
	 * UpdateCommitHostedPropertyValueExecute executes the request
	 */
	UpdateCommitHostedPropertyValueExecute(r PropertiesApiApiUpdateCommitHostedPropertyValueRequest) (*_nethttp.Response, error)

	/*
	 * UpdatePullRequestHostedPropertyValue Method for UpdatePullRequestHostedPropertyValue
	 * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param workspace The repository container; either the workspace slug or the UUID in curly braces.
	 * @param repoSlug The repository.
	 * @param pullrequestId The pull request ID.
	 * @param appKey The key of the Connect app.
	 * @param propertyName The name of the property.
	 * @return PropertiesApiApiUpdatePullRequestHostedPropertyValueRequest
	 */
	UpdatePullRequestHostedPropertyValue(ctx _context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string) PropertiesApiApiUpdatePullRequestHostedPropertyValueRequest

	/*
	 * UpdatePullRequestHostedPropertyValueExecute executes the request
	 */
	UpdatePullRequestHostedPropertyValueExecute(r PropertiesApiApiUpdatePullRequestHostedPropertyValueRequest) (*_nethttp.Response, error)

	/*
	 * UpdateRepositoryHostedPropertyValue Method for UpdateRepositoryHostedPropertyValue
	 * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param workspace The repository container; either the workspace slug or the UUID in curly braces.
	 * @param repoSlug The repository.
	 * @param appKey The key of the Connect app.
	 * @param propertyName The name of the property.
	 * @return PropertiesApiApiUpdateRepositoryHostedPropertyValueRequest
	 */
	UpdateRepositoryHostedPropertyValue(ctx _context.Context, workspace string, repoSlug string, appKey string, propertyName string) PropertiesApiApiUpdateRepositoryHostedPropertyValueRequest

	/*
	 * UpdateRepositoryHostedPropertyValueExecute executes the request
	 */
	UpdateRepositoryHostedPropertyValueExecute(r PropertiesApiApiUpdateRepositoryHostedPropertyValueRequest) (*_nethttp.Response, error)

	/*
	 * UpdateUserHostedPropertyValue Method for UpdateUserHostedPropertyValue
	 * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example `{account UUID}`, OR an Atlassian Account ID.
	 * @param appKey The key of the Connect app.
	 * @param propertyName The name of the property.
	 * @return PropertiesApiApiUpdateUserHostedPropertyValueRequest
	 */
	UpdateUserHostedPropertyValue(ctx _context.Context, selectedUser string, appKey string, propertyName string) PropertiesApiApiUpdateUserHostedPropertyValueRequest

	/*
	 * UpdateUserHostedPropertyValueExecute executes the request
	 */
	UpdateUserHostedPropertyValueExecute(r PropertiesApiApiUpdateUserHostedPropertyValueRequest) (*_nethttp.Response, error)
}

// PropertiesApiService PropertiesApi service
type PropertiesApiService service

type PropertiesApiApiDeleteCommitHostedPropertyValueRequest struct {
	ctx _context.Context
	ApiService PropertiesApi
	workspace string
	repoSlug string
	commit string
	appKey string
	propertyName string
}


func (r PropertiesApiApiDeleteCommitHostedPropertyValueRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteCommitHostedPropertyValueExecute(r)
}

/*
 * DeleteCommitHostedPropertyValue Method for DeleteCommitHostedPropertyValue
 * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param workspace The repository container; either the workspace slug or the UUID in curly braces.
 * @param repoSlug The repository.
 * @param commit The commit.
 * @param appKey The key of the Connect app.
 * @param propertyName The name of the property.
 * @return PropertiesApiApiDeleteCommitHostedPropertyValueRequest
 */
func (a *PropertiesApiService) DeleteCommitHostedPropertyValue(ctx _context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string) PropertiesApiApiDeleteCommitHostedPropertyValueRequest {
	return PropertiesApiApiDeleteCommitHostedPropertyValueRequest{
		ApiService: a,
		ctx: ctx,
		workspace: workspace,
		repoSlug: repoSlug,
		commit: commit,
		appKey: appKey,
		propertyName: propertyName,
	}
}

/*
 * Execute executes the request
 */
func (a *PropertiesApiService) DeleteCommitHostedPropertyValueExecute(r PropertiesApiApiDeleteCommitHostedPropertyValueRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PropertiesApiService.DeleteCommitHostedPropertyValue")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repositories/{workspace}/{repo_slug}/commit/{commit}/properties/{app_key}/{property_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"workspace"+"}", _neturl.PathEscape(parameterToString(r.workspace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo_slug"+"}", _neturl.PathEscape(parameterToString(r.repoSlug, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"commit"+"}", _neturl.PathEscape(parameterToString(r.commit, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"app_key"+"}", _neturl.PathEscape(parameterToString(r.appKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property_name"+"}", _neturl.PathEscape(parameterToString(r.propertyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PropertiesApiApiDeletePullRequestHostedPropertyValueRequest struct {
	ctx _context.Context
	ApiService PropertiesApi
	workspace string
	repoSlug string
	pullrequestId string
	appKey string
	propertyName string
}


func (r PropertiesApiApiDeletePullRequestHostedPropertyValueRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeletePullRequestHostedPropertyValueExecute(r)
}

/*
 * DeletePullRequestHostedPropertyValue Method for DeletePullRequestHostedPropertyValue
 * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param workspace The repository container; either the workspace slug or the UUID in curly braces.
 * @param repoSlug The repository.
 * @param pullrequestId The pull request ID.
 * @param appKey The key of the Connect app.
 * @param propertyName The name of the property.
 * @return PropertiesApiApiDeletePullRequestHostedPropertyValueRequest
 */
func (a *PropertiesApiService) DeletePullRequestHostedPropertyValue(ctx _context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string) PropertiesApiApiDeletePullRequestHostedPropertyValueRequest {
	return PropertiesApiApiDeletePullRequestHostedPropertyValueRequest{
		ApiService: a,
		ctx: ctx,
		workspace: workspace,
		repoSlug: repoSlug,
		pullrequestId: pullrequestId,
		appKey: appKey,
		propertyName: propertyName,
	}
}

/*
 * Execute executes the request
 */
func (a *PropertiesApiService) DeletePullRequestHostedPropertyValueExecute(r PropertiesApiApiDeletePullRequestHostedPropertyValueRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PropertiesApiService.DeletePullRequestHostedPropertyValue")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repositories/{workspace}/{repo_slug}/pullrequests/{pullrequest_id}/properties/{app_key}/{property_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"workspace"+"}", _neturl.PathEscape(parameterToString(r.workspace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo_slug"+"}", _neturl.PathEscape(parameterToString(r.repoSlug, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pullrequest_id"+"}", _neturl.PathEscape(parameterToString(r.pullrequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"app_key"+"}", _neturl.PathEscape(parameterToString(r.appKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property_name"+"}", _neturl.PathEscape(parameterToString(r.propertyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PropertiesApiApiDeleteRepositoryHostedPropertyValueRequest struct {
	ctx _context.Context
	ApiService PropertiesApi
	workspace string
	repoSlug string
	appKey string
	propertyName string
}


func (r PropertiesApiApiDeleteRepositoryHostedPropertyValueRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteRepositoryHostedPropertyValueExecute(r)
}

/*
 * DeleteRepositoryHostedPropertyValue Method for DeleteRepositoryHostedPropertyValue
 * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param workspace The repository container; either the workspace slug or the UUID in curly braces.
 * @param repoSlug The repository.
 * @param appKey The key of the Connect app.
 * @param propertyName The name of the property.
 * @return PropertiesApiApiDeleteRepositoryHostedPropertyValueRequest
 */
func (a *PropertiesApiService) DeleteRepositoryHostedPropertyValue(ctx _context.Context, workspace string, repoSlug string, appKey string, propertyName string) PropertiesApiApiDeleteRepositoryHostedPropertyValueRequest {
	return PropertiesApiApiDeleteRepositoryHostedPropertyValueRequest{
		ApiService: a,
		ctx: ctx,
		workspace: workspace,
		repoSlug: repoSlug,
		appKey: appKey,
		propertyName: propertyName,
	}
}

/*
 * Execute executes the request
 */
func (a *PropertiesApiService) DeleteRepositoryHostedPropertyValueExecute(r PropertiesApiApiDeleteRepositoryHostedPropertyValueRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PropertiesApiService.DeleteRepositoryHostedPropertyValue")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repositories/{workspace}/{repo_slug}/properties/{app_key}/{property_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"workspace"+"}", _neturl.PathEscape(parameterToString(r.workspace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo_slug"+"}", _neturl.PathEscape(parameterToString(r.repoSlug, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"app_key"+"}", _neturl.PathEscape(parameterToString(r.appKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property_name"+"}", _neturl.PathEscape(parameterToString(r.propertyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PropertiesApiApiDeleteUserHostedPropertyValueRequest struct {
	ctx _context.Context
	ApiService PropertiesApi
	selectedUser string
	appKey string
	propertyName string
}


func (r PropertiesApiApiDeleteUserHostedPropertyValueRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteUserHostedPropertyValueExecute(r)
}

/*
 * DeleteUserHostedPropertyValue Method for DeleteUserHostedPropertyValue
 * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example `{account UUID}`, OR an Atlassian Account ID.
 * @param appKey The key of the Connect app.
 * @param propertyName The name of the property.
 * @return PropertiesApiApiDeleteUserHostedPropertyValueRequest
 */
func (a *PropertiesApiService) DeleteUserHostedPropertyValue(ctx _context.Context, selectedUser string, appKey string, propertyName string) PropertiesApiApiDeleteUserHostedPropertyValueRequest {
	return PropertiesApiApiDeleteUserHostedPropertyValueRequest{
		ApiService: a,
		ctx: ctx,
		selectedUser: selectedUser,
		appKey: appKey,
		propertyName: propertyName,
	}
}

/*
 * Execute executes the request
 */
func (a *PropertiesApiService) DeleteUserHostedPropertyValueExecute(r PropertiesApiApiDeleteUserHostedPropertyValueRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PropertiesApiService.DeleteUserHostedPropertyValue")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{selected_user}/properties/{app_key}/{property_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"selected_user"+"}", _neturl.PathEscape(parameterToString(r.selectedUser, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"app_key"+"}", _neturl.PathEscape(parameterToString(r.appKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property_name"+"}", _neturl.PathEscape(parameterToString(r.propertyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PropertiesApiApiGetCommitHostedPropertyValueRequest struct {
	ctx _context.Context
	ApiService PropertiesApi
	workspace string
	repoSlug string
	commit string
	appKey string
	propertyName string
}


func (r PropertiesApiApiGetCommitHostedPropertyValueRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GetCommitHostedPropertyValueExecute(r)
}

/*
 * GetCommitHostedPropertyValue Method for GetCommitHostedPropertyValue
 * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param workspace The repository container; either the workspace slug or the UUID in curly braces.
 * @param repoSlug The repository.
 * @param commit The commit.
 * @param appKey The key of the Connect app.
 * @param propertyName The name of the property.
 * @return PropertiesApiApiGetCommitHostedPropertyValueRequest
 */
func (a *PropertiesApiService) GetCommitHostedPropertyValue(ctx _context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string) PropertiesApiApiGetCommitHostedPropertyValueRequest {
	return PropertiesApiApiGetCommitHostedPropertyValueRequest{
		ApiService: a,
		ctx: ctx,
		workspace: workspace,
		repoSlug: repoSlug,
		commit: commit,
		appKey: appKey,
		propertyName: propertyName,
	}
}

/*
 * Execute executes the request
 */
func (a *PropertiesApiService) GetCommitHostedPropertyValueExecute(r PropertiesApiApiGetCommitHostedPropertyValueRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PropertiesApiService.GetCommitHostedPropertyValue")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repositories/{workspace}/{repo_slug}/commit/{commit}/properties/{app_key}/{property_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"workspace"+"}", _neturl.PathEscape(parameterToString(r.workspace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo_slug"+"}", _neturl.PathEscape(parameterToString(r.repoSlug, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"commit"+"}", _neturl.PathEscape(parameterToString(r.commit, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"app_key"+"}", _neturl.PathEscape(parameterToString(r.appKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property_name"+"}", _neturl.PathEscape(parameterToString(r.propertyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PropertiesApiApiGetPullRequestHostedPropertyValueRequest struct {
	ctx _context.Context
	ApiService PropertiesApi
	workspace string
	repoSlug string
	pullrequestId string
	appKey string
	propertyName string
}


func (r PropertiesApiApiGetPullRequestHostedPropertyValueRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GetPullRequestHostedPropertyValueExecute(r)
}

/*
 * GetPullRequestHostedPropertyValue Method for GetPullRequestHostedPropertyValue
 * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param workspace The repository container; either the workspace slug or the UUID in curly braces.
 * @param repoSlug The repository.
 * @param pullrequestId The pull request ID.
 * @param appKey The key of the Connect app.
 * @param propertyName The name of the property.
 * @return PropertiesApiApiGetPullRequestHostedPropertyValueRequest
 */
func (a *PropertiesApiService) GetPullRequestHostedPropertyValue(ctx _context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string) PropertiesApiApiGetPullRequestHostedPropertyValueRequest {
	return PropertiesApiApiGetPullRequestHostedPropertyValueRequest{
		ApiService: a,
		ctx: ctx,
		workspace: workspace,
		repoSlug: repoSlug,
		pullrequestId: pullrequestId,
		appKey: appKey,
		propertyName: propertyName,
	}
}

/*
 * Execute executes the request
 */
func (a *PropertiesApiService) GetPullRequestHostedPropertyValueExecute(r PropertiesApiApiGetPullRequestHostedPropertyValueRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PropertiesApiService.GetPullRequestHostedPropertyValue")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repositories/{workspace}/{repo_slug}/pullrequests/{pullrequest_id}/properties/{app_key}/{property_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"workspace"+"}", _neturl.PathEscape(parameterToString(r.workspace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo_slug"+"}", _neturl.PathEscape(parameterToString(r.repoSlug, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pullrequest_id"+"}", _neturl.PathEscape(parameterToString(r.pullrequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"app_key"+"}", _neturl.PathEscape(parameterToString(r.appKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property_name"+"}", _neturl.PathEscape(parameterToString(r.propertyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PropertiesApiApiGetRepositoryHostedPropertyValueRequest struct {
	ctx _context.Context
	ApiService PropertiesApi
	workspace string
	repoSlug string
	appKey string
	propertyName string
}


func (r PropertiesApiApiGetRepositoryHostedPropertyValueRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GetRepositoryHostedPropertyValueExecute(r)
}

/*
 * GetRepositoryHostedPropertyValue Method for GetRepositoryHostedPropertyValue
 * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param workspace The repository container; either the workspace slug or the UUID in curly braces.
 * @param repoSlug The repository.
 * @param appKey The key of the Connect app.
 * @param propertyName The name of the property.
 * @return PropertiesApiApiGetRepositoryHostedPropertyValueRequest
 */
func (a *PropertiesApiService) GetRepositoryHostedPropertyValue(ctx _context.Context, workspace string, repoSlug string, appKey string, propertyName string) PropertiesApiApiGetRepositoryHostedPropertyValueRequest {
	return PropertiesApiApiGetRepositoryHostedPropertyValueRequest{
		ApiService: a,
		ctx: ctx,
		workspace: workspace,
		repoSlug: repoSlug,
		appKey: appKey,
		propertyName: propertyName,
	}
}

/*
 * Execute executes the request
 */
func (a *PropertiesApiService) GetRepositoryHostedPropertyValueExecute(r PropertiesApiApiGetRepositoryHostedPropertyValueRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PropertiesApiService.GetRepositoryHostedPropertyValue")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repositories/{workspace}/{repo_slug}/properties/{app_key}/{property_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"workspace"+"}", _neturl.PathEscape(parameterToString(r.workspace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo_slug"+"}", _neturl.PathEscape(parameterToString(r.repoSlug, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"app_key"+"}", _neturl.PathEscape(parameterToString(r.appKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property_name"+"}", _neturl.PathEscape(parameterToString(r.propertyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PropertiesApiApiRetrieveUserHostedPropertyValueRequest struct {
	ctx _context.Context
	ApiService PropertiesApi
	selectedUser string
	appKey string
	propertyName string
}


func (r PropertiesApiApiRetrieveUserHostedPropertyValueRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.RetrieveUserHostedPropertyValueExecute(r)
}

/*
 * RetrieveUserHostedPropertyValue Method for RetrieveUserHostedPropertyValue
 * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example `{account UUID}`, OR an Atlassian Account ID.
 * @param appKey The key of the Connect app.
 * @param propertyName The name of the property.
 * @return PropertiesApiApiRetrieveUserHostedPropertyValueRequest
 */
func (a *PropertiesApiService) RetrieveUserHostedPropertyValue(ctx _context.Context, selectedUser string, appKey string, propertyName string) PropertiesApiApiRetrieveUserHostedPropertyValueRequest {
	return PropertiesApiApiRetrieveUserHostedPropertyValueRequest{
		ApiService: a,
		ctx: ctx,
		selectedUser: selectedUser,
		appKey: appKey,
		propertyName: propertyName,
	}
}

/*
 * Execute executes the request
 */
func (a *PropertiesApiService) RetrieveUserHostedPropertyValueExecute(r PropertiesApiApiRetrieveUserHostedPropertyValueRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PropertiesApiService.RetrieveUserHostedPropertyValue")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{selected_user}/properties/{app_key}/{property_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"selected_user"+"}", _neturl.PathEscape(parameterToString(r.selectedUser, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"app_key"+"}", _neturl.PathEscape(parameterToString(r.appKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property_name"+"}", _neturl.PathEscape(parameterToString(r.propertyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PropertiesApiApiUpdateCommitHostedPropertyValueRequest struct {
	ctx _context.Context
	ApiService PropertiesApi
	workspace string
	repoSlug string
	commit string
	appKey string
	propertyName string
}


func (r PropertiesApiApiUpdateCommitHostedPropertyValueRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UpdateCommitHostedPropertyValueExecute(r)
}

/*
 * UpdateCommitHostedPropertyValue Method for UpdateCommitHostedPropertyValue
 * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param workspace The repository container; either the workspace slug or the UUID in curly braces.
 * @param repoSlug The repository.
 * @param commit The commit.
 * @param appKey The key of the Connect app.
 * @param propertyName The name of the property.
 * @return PropertiesApiApiUpdateCommitHostedPropertyValueRequest
 */
func (a *PropertiesApiService) UpdateCommitHostedPropertyValue(ctx _context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string) PropertiesApiApiUpdateCommitHostedPropertyValueRequest {
	return PropertiesApiApiUpdateCommitHostedPropertyValueRequest{
		ApiService: a,
		ctx: ctx,
		workspace: workspace,
		repoSlug: repoSlug,
		commit: commit,
		appKey: appKey,
		propertyName: propertyName,
	}
}

/*
 * Execute executes the request
 */
func (a *PropertiesApiService) UpdateCommitHostedPropertyValueExecute(r PropertiesApiApiUpdateCommitHostedPropertyValueRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PropertiesApiService.UpdateCommitHostedPropertyValue")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repositories/{workspace}/{repo_slug}/commit/{commit}/properties/{app_key}/{property_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"workspace"+"}", _neturl.PathEscape(parameterToString(r.workspace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo_slug"+"}", _neturl.PathEscape(parameterToString(r.repoSlug, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"commit"+"}", _neturl.PathEscape(parameterToString(r.commit, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"app_key"+"}", _neturl.PathEscape(parameterToString(r.appKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property_name"+"}", _neturl.PathEscape(parameterToString(r.propertyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PropertiesApiApiUpdatePullRequestHostedPropertyValueRequest struct {
	ctx _context.Context
	ApiService PropertiesApi
	workspace string
	repoSlug string
	pullrequestId string
	appKey string
	propertyName string
}


func (r PropertiesApiApiUpdatePullRequestHostedPropertyValueRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UpdatePullRequestHostedPropertyValueExecute(r)
}

/*
 * UpdatePullRequestHostedPropertyValue Method for UpdatePullRequestHostedPropertyValue
 * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param workspace The repository container; either the workspace slug or the UUID in curly braces.
 * @param repoSlug The repository.
 * @param pullrequestId The pull request ID.
 * @param appKey The key of the Connect app.
 * @param propertyName The name of the property.
 * @return PropertiesApiApiUpdatePullRequestHostedPropertyValueRequest
 */
func (a *PropertiesApiService) UpdatePullRequestHostedPropertyValue(ctx _context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string) PropertiesApiApiUpdatePullRequestHostedPropertyValueRequest {
	return PropertiesApiApiUpdatePullRequestHostedPropertyValueRequest{
		ApiService: a,
		ctx: ctx,
		workspace: workspace,
		repoSlug: repoSlug,
		pullrequestId: pullrequestId,
		appKey: appKey,
		propertyName: propertyName,
	}
}

/*
 * Execute executes the request
 */
func (a *PropertiesApiService) UpdatePullRequestHostedPropertyValueExecute(r PropertiesApiApiUpdatePullRequestHostedPropertyValueRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PropertiesApiService.UpdatePullRequestHostedPropertyValue")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repositories/{workspace}/{repo_slug}/pullrequests/{pullrequest_id}/properties/{app_key}/{property_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"workspace"+"}", _neturl.PathEscape(parameterToString(r.workspace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo_slug"+"}", _neturl.PathEscape(parameterToString(r.repoSlug, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pullrequest_id"+"}", _neturl.PathEscape(parameterToString(r.pullrequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"app_key"+"}", _neturl.PathEscape(parameterToString(r.appKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property_name"+"}", _neturl.PathEscape(parameterToString(r.propertyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PropertiesApiApiUpdateRepositoryHostedPropertyValueRequest struct {
	ctx _context.Context
	ApiService PropertiesApi
	workspace string
	repoSlug string
	appKey string
	propertyName string
}


func (r PropertiesApiApiUpdateRepositoryHostedPropertyValueRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UpdateRepositoryHostedPropertyValueExecute(r)
}

/*
 * UpdateRepositoryHostedPropertyValue Method for UpdateRepositoryHostedPropertyValue
 * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param workspace The repository container; either the workspace slug or the UUID in curly braces.
 * @param repoSlug The repository.
 * @param appKey The key of the Connect app.
 * @param propertyName The name of the property.
 * @return PropertiesApiApiUpdateRepositoryHostedPropertyValueRequest
 */
func (a *PropertiesApiService) UpdateRepositoryHostedPropertyValue(ctx _context.Context, workspace string, repoSlug string, appKey string, propertyName string) PropertiesApiApiUpdateRepositoryHostedPropertyValueRequest {
	return PropertiesApiApiUpdateRepositoryHostedPropertyValueRequest{
		ApiService: a,
		ctx: ctx,
		workspace: workspace,
		repoSlug: repoSlug,
		appKey: appKey,
		propertyName: propertyName,
	}
}

/*
 * Execute executes the request
 */
func (a *PropertiesApiService) UpdateRepositoryHostedPropertyValueExecute(r PropertiesApiApiUpdateRepositoryHostedPropertyValueRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PropertiesApiService.UpdateRepositoryHostedPropertyValue")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repositories/{workspace}/{repo_slug}/properties/{app_key}/{property_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"workspace"+"}", _neturl.PathEscape(parameterToString(r.workspace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo_slug"+"}", _neturl.PathEscape(parameterToString(r.repoSlug, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"app_key"+"}", _neturl.PathEscape(parameterToString(r.appKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property_name"+"}", _neturl.PathEscape(parameterToString(r.propertyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PropertiesApiApiUpdateUserHostedPropertyValueRequest struct {
	ctx _context.Context
	ApiService PropertiesApi
	selectedUser string
	appKey string
	propertyName string
}


func (r PropertiesApiApiUpdateUserHostedPropertyValueRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UpdateUserHostedPropertyValueExecute(r)
}

/*
 * UpdateUserHostedPropertyValue Method for UpdateUserHostedPropertyValue
 * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example `{account UUID}`, OR an Atlassian Account ID.
 * @param appKey The key of the Connect app.
 * @param propertyName The name of the property.
 * @return PropertiesApiApiUpdateUserHostedPropertyValueRequest
 */
func (a *PropertiesApiService) UpdateUserHostedPropertyValue(ctx _context.Context, selectedUser string, appKey string, propertyName string) PropertiesApiApiUpdateUserHostedPropertyValueRequest {
	return PropertiesApiApiUpdateUserHostedPropertyValueRequest{
		ApiService: a,
		ctx: ctx,
		selectedUser: selectedUser,
		appKey: appKey,
		propertyName: propertyName,
	}
}

/*
 * Execute executes the request
 */
func (a *PropertiesApiService) UpdateUserHostedPropertyValueExecute(r PropertiesApiApiUpdateUserHostedPropertyValueRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PropertiesApiService.UpdateUserHostedPropertyValue")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{selected_user}/properties/{app_key}/{property_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"selected_user"+"}", _neturl.PathEscape(parameterToString(r.selectedUser, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"app_key"+"}", _neturl.PathEscape(parameterToString(r.appKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property_name"+"}", _neturl.PathEscape(parameterToString(r.propertyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
